/**
  ******************************************************************************
  * @file    BMP280.c
  * @author  Waveshare Team
  * @version V1.0
  * @date    12-12-2016
  * @brief   This file includes the BMP280 driver functions
  ******************************************************************************
  */
#include "bsp_bmp280.h"

uint16_t dig_T1;  
int16_t dig_T2; 
int16_t dig_T3;  
uint16_t dig_P1; 
int16_t dig_P2;  
int16_t dig_P3; 
int16_t dig_P4; 
int16_t dig_P5; 
int16_t dig_P6; 
int16_t dig_P7; 
int16_t dig_P8; 
int16_t dig_P9; 
int32_t t_fine; 

int32_t gs32Pressure0 = MSLP; 

int16_t AC1, AC2, AC3, B1, B2, MB, MC, MD, _oss;  
uint16_t AC4, AC5, AC6;
int32_t B5, UT, UP, Pressure0 = MSLP; 
int32_t PressureVal = 0, TemperatureVal = 0, AltitudeVal = 0;

#if (BUS_TYPE == BUS_SPI)
/**
  * @brief  Initializes MPU9255
  * @param  None
  * @retval None
  */
void BMP280_ReadReg_spi(uint8_t RegAddr, uint8_t Num, uint8_t *pBuffer) 
{
	uint8_t spi1_txbuf[5];
	
	CS280_LOW;
	spi1_txbuf[0] = RegAddr | BMP280_READ;
	HAL_SPI_Transmit(&hspi1, &spi1_txbuf[0], 1, 100);
	HAL_SPI_Receive(&hspi1, pBuffer, Num, 100);
	CS280_HIGH;
	HAL_Delay(1);
	
}

/**
  * @brief   
  * @param  None
  * @retval None
  */
void BMP280_WriteReg_spi(uint8_t RegAddr, uint8_t Val) 
{
	uint8_t spi1_txbuf[5];
	
	CS280_LOW;
	spi1_txbuf[0] = RegAddr & BMP280_WRITE;
	spi1_txbuf[1] = Val;
	HAL_SPI_Transmit(&hspi1, &spi1_txbuf[0], 2, 100);
	CS280_HIGH;
	HAL_Delay(1);
	
}

/**
  * @brief   
  * @param  None
  * @retval None
  */
void BMP280_Read_Calibration_spi(void)
{
	uint8_t lsb, msb; 
	
	/* read the temperature calibration parameters */  
	BMP280_ReadReg_spi(BMP280_DIG_T1_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_T1_MSB_REG, 1, &msb);
	dig_T1 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_T2_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_T2_MSB_REG, 1, &msb);
	dig_T2 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_T3_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_T3_MSB_REG, 1, &msb);
	dig_T3 = msb << 8 | lsb;  
	
	/* read the pressure calibration parameters */  
	BMP280_ReadReg_spi(BMP280_DIG_P1_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P1_MSB_REG, 1, &msb);    
	dig_P1 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_P2_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P2_MSB_REG, 1, &msb);      
	dig_P2 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_P3_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P3_MSB_REG, 1, &msb);
	dig_P3 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_P4_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P4_MSB_REG, 1, &msb);    
	dig_P4 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_P5_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P5_MSB_REG, 1, &msb);     
	dig_P5 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_P6_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P6_MSB_REG, 1, &msb);     
	dig_P6 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_P7_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P7_MSB_REG, 1, &msb);      
	dig_P7 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_P8_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P8_MSB_REG, 1, &msb);     
	dig_P8 = msb << 8 | lsb;  
	BMP280_ReadReg_spi(BMP280_DIG_P9_LSB_REG, 1, &lsb);
	BMP280_ReadReg_spi(BMP280_DIG_P9_MSB_REG, 1, &msb);      
	dig_P9 = msb << 8 | lsb; 

}

/**
  * @brief   
  * @param  None
  * @retval None
  */
/* Returns temperature in DegC, double precision. Output value of "1.23"equals 51.23 DegC. */  
double BMP280_Compensate_Temperature_spi(int32_t adc_T)  
{  
	double var1, var2, temperature;  
	var1 = (((double) adc_T) / 16384.0 - ((double) dig_T1) / 1024.0) * ((double) dig_T2); 
	var2 = ((((double) adc_T) / 131072.0 - ((double) dig_T1) / 8192.0)  * (((double) adc_T) / 131072.0  
					- ((double) dig_T1) / 8192.0)) * ((double) dig_T3);  
	t_fine = (int32_t) (var1 + var2);  
	temperature = (var1 + var2) / 5120.0;  
	
	return temperature;  
	
}  
  
/**
  * @brief   
  * @param  None
  * @retval None
  */ 
/* Returns pressure in Pa as double. Output value of "6386.2"equals 96386.2 Pa = 963.862 hPa */  
double BMP280_Compensate_Pressure_spi(int32_t adc_P)  
{  
	double var1, var2, pressure;  

	var1 = ((double)t_fine / 2.0) - 64000.0; 
	var2 = var1 * var1 * ((double) dig_P6) / 32768.0;  
	var2 = var2 + var1 * ((double) dig_P5) * 2.0;  
	var2 = (var2 / 4.0) + (((double) dig_P4) * 65536.0);  
	var1 = (((double) dig_P3) * var1 * var1 / 524288.0  + ((double) dig_P2) * var1) / 524288.0;  
	var1 = (1.0 + var1 / 32768.0) * ((double) dig_P1);  

	if (var1 < 1.0E-5) {  
		return 0; // avoid exception caused by division by zero  
	}  

	pressure = 1048576.0 - (double) adc_P;  
	pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;  
	var1 = ((double) dig_P9) * pressure * pressure / 2147483648.0;  
	var2 = pressure * ((double) dig_P8) / 32768.0;  
	pressure = pressure + (var1 + var2 + ((double) dig_P7)) / 16.0;  

	return pressure; 
	
} 

/**
  * @brief   
  * @param  None
  * @retval None
  */
void BMP280_Get_Temperature_And_Pressure_spi(double *temperature, double *pressure)  
{  
	uint8_t lsb, msb, xlsb;  
	int32_t adc_P,adc_T;
    
	BMP280_ReadReg_spi(BMP280_TEMP_XLSB_REG, 1, &xlsb);
	BMP280_ReadReg_spi(BMP280_TEMP_LSB_REG,  1, &lsb);
	BMP280_ReadReg_spi(BMP280_TEMP_MSB_REG,  1, &msb);
	adc_T = (msb << 12) | (lsb << 4) | (xlsb >> 4); 
	//adc_T = 415148;
	* temperature = BMP280_Compensate_Temperature_spi(adc_T);

	BMP280_ReadReg_spi(BMP280_PRESS_XLSB_REG, 1, &xlsb);
	BMP280_ReadReg_spi(BMP280_PRESS_LSB_REG,  1, &lsb);
	BMP280_ReadReg_spi(BMP280_PRESS_MSB_REG,  1, &msb);
	adc_P = (msb << 12) | (lsb << 4) | (xlsb >> 4); 
	//adc_P = 51988;
	* pressure = BMP280_Compensate_Pressure_spi(adc_P);  
	
} 

/**
  * @brief   
  * @param  None
  * @retval None
  */
void BMP280_CalAvgValue_spi(uint8_t *pIndex, int32_t *pAvgBuffer, int32_t InVal, int32_t *pOutVal)
{	
	uint8_t i;
	
	*(pAvgBuffer + ((*pIndex) ++)) = InVal;
	*pIndex &= 0x07;
  	
	*pOutVal = 0;
	for(i = 0; i < 8; i ++) 
	{
		*pOutVal += *(pAvgBuffer + i);
	}
	*pOutVal >>= 3;
	
}

/**
  * @brief   
  * @param  None
  * @retval None
  */
void BMP280_CalculateAbsoluteAltitude_spi(int32_t *pAltitude, int32_t PressureVal)
{
	*pAltitude = 4433000 * (1 - pow((PressureVal / (float)gs32Pressure0), 0.1903)); 
	
}

/**
  * @brief   
  * @param  None
  * @retval None
  */
uint8_t BMP280_Initi_spi(void)
{
	uint8_t Ret = BMP280_RET_OK;
	uint8_t ChipID, CtrlMod, Status;
	
	BMP280_ReadReg_spi(BMP280_REGISTER_CHIPID, 1, &ChipID);
	BMP280_ReadReg_spi(BMP280_REGISTER_CONTROL, 1, &CtrlMod);
	BMP280_ReadReg_spi(BMP280_REGISTER_STATUS, 1, &Status);

	if(ChipID == BSP280_CHIP_ID)
	{
		BMP280_WriteReg_spi(BMP280_REGISTER_CONTROL&BMP280_WRITE, 0xFF); // SPI Write/Read, Bit7 = 0 is write, Bit7 = 1 is read;
		BMP280_WriteReg_spi(BMP280_REGISTER_CONFIG&BMP280_WRITE, 0x14);  // SPI Write/Read, Bit7 = 0 is write, Bit7 = 1 is read;
		BMP280_Read_Calibration_spi();

	}
	else
	{
		Ret = BMP280_RET_NG;
	}
	return  Ret;
	
}

/**
  * @brief   
  * @param  None
  * @retval None
  */
void BMP280_CalTemperatureAndPressureAndAltitude_spi(int32_t *temperature, int32_t *pressure, int32_t *Altitude)
{
	double CurPressure, CurTemperature;
	int32_t CurAltitude;
	double sum = 0;
  static BMP280_AvgTypeDef BMP280_Filter[3];
     
	BMP280_Get_Temperature_And_Pressure_spi(&CurTemperature, &CurPressure);
  BMP280_CalAvgValue_spi(&BMP280_Filter[0].Index, BMP280_Filter[0].AvgBuffer, (int32_t)(CurPressure), pressure);
  
  BMP280_CalculateAbsoluteAltitude_spi(&CurAltitude, (*pressure));
  BMP280_CalAvgValue_spi(&BMP280_Filter[1].Index, BMP280_Filter[1].AvgBuffer, CurAltitude, Altitude);
  BMP280_CalAvgValue_spi(&BMP280_Filter[2].Index, BMP280_Filter[2].AvgBuffer, (int32_t)CurTemperature*10, temperature);
    
  return;
	
}

#endif
